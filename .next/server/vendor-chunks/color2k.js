"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/color2k";
exports.ids = ["vendor-chunks/color2k"];
exports.modules = {

/***/ "(ssr)/./node_modules/color2k/dist/index.exports.import.es.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/color2k/dist/index.exports.import.es.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColorError: () => (/* binding */ ColorError$1),\n/* harmony export */   adjustHue: () => (/* binding */ adjustHue),\n/* harmony export */   darken: () => (/* binding */ darken),\n/* harmony export */   desaturate: () => (/* binding */ desaturate),\n/* harmony export */   getContrast: () => (/* binding */ getContrast),\n/* harmony export */   getLuminance: () => (/* binding */ getLuminance),\n/* harmony export */   getScale: () => (/* binding */ getScale),\n/* harmony export */   guard: () => (/* binding */ guard),\n/* harmony export */   hasBadContrast: () => (/* binding */ hasBadContrast),\n/* harmony export */   hsla: () => (/* binding */ hsla),\n/* harmony export */   lighten: () => (/* binding */ lighten),\n/* harmony export */   mix: () => (/* binding */ mix),\n/* harmony export */   opacify: () => (/* binding */ opacify),\n/* harmony export */   parseToHsla: () => (/* binding */ parseToHsla),\n/* harmony export */   parseToRgba: () => (/* binding */ parseToRgba),\n/* harmony export */   readableColor: () => (/* binding */ readableColor),\n/* harmony export */   readableColorIsBlack: () => (/* binding */ readableColorIsBlack),\n/* harmony export */   rgba: () => (/* binding */ rgba),\n/* harmony export */   saturate: () => (/* binding */ saturate),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   toHsla: () => (/* binding */ toHsla),\n/* harmony export */   toRgba: () => (/* binding */ toRgba),\n/* harmony export */   transparentize: () => (/* binding */ transparentize)\n/* harmony export */ });\n/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */ function guard(low, high, value) {\n    return Math.min(Math.max(low, value), high);\n}\nclass ColorError extends Error {\n    constructor(color){\n        super(`Failed to parse color: \"${color}\"`);\n    }\n}\nvar ColorError$1 = ColorError;\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */ function parseToRgba(color) {\n    if (typeof color !== \"string\") throw new ColorError$1(color);\n    if (color.trim().toLowerCase() === \"transparent\") return [\n        0,\n        0,\n        0,\n        0\n    ];\n    let normalizedColor = color.trim();\n    normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n    const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n    if (reducedHexMatch) {\n        const arr = Array.from(reducedHexMatch).slice(1);\n        return [\n            ...arr.slice(0, 3).map((x)=>parseInt(r(x, 2), 16)),\n            parseInt(r(arr[3] || \"f\", 2), 16) / 255\n        ];\n    }\n    const hexMatch = hexRegex.exec(normalizedColor);\n    if (hexMatch) {\n        const arr = Array.from(hexMatch).slice(1);\n        return [\n            ...arr.slice(0, 3).map((x)=>parseInt(x, 16)),\n            parseInt(arr[3] || \"ff\", 16) / 255\n        ];\n    }\n    const rgbaMatch = rgbaRegex.exec(normalizedColor);\n    if (rgbaMatch) {\n        const arr = Array.from(rgbaMatch).slice(1);\n        return [\n            ...arr.slice(0, 3).map((x)=>parseInt(x, 10)),\n            parseFloat(arr[3] || \"1\")\n        ];\n    }\n    const hslaMatch = hslaRegex.exec(normalizedColor);\n    if (hslaMatch) {\n        const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n        if (guard(0, 100, s) !== s) throw new ColorError$1(color);\n        if (guard(0, 100, l) !== l) throw new ColorError$1(color);\n        return [\n            ...hslToRgb(h, s, l),\n            Number.isNaN(a) ? 1 : a\n        ];\n    }\n    throw new ColorError$1(color);\n}\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while(i){\n        hash = hash * 33 ^ str.charCodeAt(--i);\n    }\n    /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */ return (hash >>> 0) % 2341;\n}\nconst colorToInt = (x)=>parseInt(x.replace(/_/g, \"\"), 36);\nconst compressedColorMap = \"1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm\".split(\" \").reduce((acc, next)=>{\n    const key = colorToInt(next.substring(0, 3));\n    const hex = colorToInt(next.substring(3)).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    let prefix = \"\";\n    for(let i = 0; i < 6 - hex.length; i++){\n        prefix += \"0\";\n    }\n    acc[key] = `${prefix}${hex}`;\n    return acc;\n}, {});\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */ function nameToHex(color) {\n    const normalizedColorName = color.toLowerCase().trim();\n    const result = compressedColorMap[hash(normalizedColorName)];\n    if (!result) throw new ColorError$1(color);\n    return `#${result}`;\n}\nconst r = (str, amount)=>Array.from(Array(amount)).map(()=>str).join(\"\");\nconst reducedHexRegex = new RegExp(`^#${r(\"([a-f0-9])\", 3)}([a-f0-9])?$`, \"i\");\nconst hexRegex = new RegExp(`^#${r(\"([a-f0-9]{2})\", 3)}([a-f0-9]{2})?$`, \"i\");\nconst rgbaRegex = new RegExp(`^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(\",\\\\s*(\\\\d+)\\\\s*\", 2)}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`, \"i\");\nconst hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\nconst roundColor = (color)=>{\n    return Math.round(color * 255);\n};\nconst hslToRgb = (hue, saturation, lightness)=>{\n    let l = lightness / 100;\n    if (saturation === 0) {\n        // achromatic\n        return [\n            l,\n            l,\n            l\n        ].map(roundColor);\n    }\n    // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n    const huePrime = (hue % 360 + 360) % 360 / 60;\n    const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n    const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (huePrime >= 0 && huePrime < 1) {\n        red = chroma;\n        green = secondComponent;\n    } else if (huePrime >= 1 && huePrime < 2) {\n        red = secondComponent;\n        green = chroma;\n    } else if (huePrime >= 2 && huePrime < 3) {\n        green = chroma;\n        blue = secondComponent;\n    } else if (huePrime >= 3 && huePrime < 4) {\n        green = secondComponent;\n        blue = chroma;\n    } else if (huePrime >= 4 && huePrime < 5) {\n        red = secondComponent;\n        blue = chroma;\n    } else if (huePrime >= 5 && huePrime < 6) {\n        red = chroma;\n        blue = secondComponent;\n    }\n    const lightnessModification = l - chroma / 2;\n    const finalRed = red + lightnessModification;\n    const finalGreen = green + lightnessModification;\n    const finalBlue = blue + lightnessModification;\n    return [\n        finalRed,\n        finalGreen,\n        finalBlue\n    ].map(roundColor);\n};\n// taken from:\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */ function parseToHsla(color) {\n    const [red, green, blue, alpha] = parseToRgba(color).map((value, index)=>// 3rd index is alpha channel which is already normalized\n        index === 3 ? value : value / 255);\n    const max = Math.max(red, green, blue);\n    const min = Math.min(red, green, blue);\n    const lightness = (max + min) / 2;\n    // achromatic\n    if (max === min) return [\n        0,\n        0,\n        lightness,\n        alpha\n    ];\n    const delta = max - min;\n    const saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n    const hue = 60 * (red === max ? (green - blue) / delta + (green < blue ? 6 : 0) : green === max ? (blue - red) / delta + 2 : (red - green) / delta + 4);\n    return [\n        hue,\n        saturation,\n        lightness,\n        alpha\n    ];\n}\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */ function hsla(hue, saturation, lightness, alpha) {\n    return `hsla(${(hue % 360).toFixed()}, ${guard(0, 100, saturation * 100).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;\n}\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */ function adjustHue(color, degrees) {\n    const [h, s, l, a] = parseToHsla(color);\n    return hsla(h + degrees, s, l, a);\n}\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */ function darken(color, amount) {\n    const [hue, saturation, lightness, alpha] = parseToHsla(color);\n    return hsla(hue, saturation, lightness - amount, alpha);\n}\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */ function desaturate(color, amount) {\n    const [h, s, l, a] = parseToHsla(color);\n    return hsla(h, s - amount, l, a);\n}\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n/**\n * Returns a number (float) representing the luminance of a color.\n */ function getLuminance(color) {\n    if (color === \"transparent\") return 0;\n    function f(x) {\n        const channel = x / 255;\n        return channel <= 0.03928 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);\n    }\n    const [r, g, b] = parseToRgba(color);\n    return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n// taken from:\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */ function getContrast(color1, color2) {\n    const luminance1 = getLuminance(color1);\n    const luminance2 = getLuminance(color2);\n    return luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */ function rgba(red, green, blue, alpha) {\n    return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;\n}\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */ function mix(color1, color2, weight) {\n    const normalize = (n, index)=>// 3rd index is alpha channel which is already normalized\n        index === 3 ? n : n / 255;\n    const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);\n    const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);\n    // The formula is copied from the original Sass implementation:\n    // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n    const alphaDelta = a2 - a1;\n    const normalizedWeight = weight * 2 - 1;\n    const combinedWeight = normalizedWeight * alphaDelta === -1 ? normalizedWeight : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n    const weight2 = (combinedWeight + 1) / 2;\n    const weight1 = 1 - weight2;\n    const r = (r1 * weight1 + r2 * weight2) * 255;\n    const g = (g1 * weight1 + g2 * weight2) * 255;\n    const b = (b1 * weight1 + b2 * weight2) * 255;\n    const a = a2 * weight + a1 * (1 - weight);\n    return rgba(r, g, b, a);\n}\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */ function getScale(...colors) {\n    return (n)=>{\n        const lastIndex = colors.length - 1;\n        const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n        const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n        const color1 = colors[lowIndex];\n        const color2 = colors[highIndex];\n        const unit = 1 / lastIndex;\n        const weight = (n - unit * lowIndex) / unit;\n        return mix(color1, color2, weight);\n    };\n}\nconst guidelines = {\n    decorative: 1.5,\n    readable: 3,\n    aa: 4.5,\n    aaa: 7\n};\n/**\n * Returns whether or not a color has bad contrast against a background\n * according to a given standard.\n */ function hasBadContrast(color, standard = \"aa\", background = \"#fff\") {\n    return getContrast(color, background) < guidelines[standard];\n}\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */ function lighten(color, amount) {\n    return darken(color, -amount);\n}\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */ function transparentize(color, amount) {\n    const [r, g, b, a] = parseToRgba(color);\n    return rgba(r, g, b, a - amount);\n}\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */ function opacify(color, amount) {\n    return transparentize(color, -amount);\n}\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */ function readableColorIsBlack(color) {\n    return getLuminance(color) > 0.179;\n}\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */ function readableColor(color) {\n    return readableColorIsBlack(color) ? \"#000\" : \"#fff\";\n}\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */ function saturate(color, amount) {\n    return desaturate(color, -amount);\n}\n/**\n * Takes in any color and returns it as a hex code.\n */ function toHex(color) {\n    const [r, g, b, a] = parseToRgba(color);\n    let hex = (x)=>{\n        const h = guard(0, 255, x).toString(16);\n        // NOTE: padStart could be used here but it breaks Node 6 compat\n        // https://github.com/ricokahler/color2k/issues/351\n        return h.length === 1 ? `0${h}` : h;\n    };\n    return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : \"\"}`;\n}\n/**\n * Takes in any color and returns it as an rgba string.\n */ function toRgba(color) {\n    return rgba(...parseToRgba(color));\n}\n/**\n * Takes in any color and returns it as an hsla string.\n */ function toHsla(color) {\n    return hsla(...parseToHsla(color));\n}\n //# sourceMappingURL=index.exports.import.es.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29sb3Iyay9kaXN0L2luZGV4LmV4cG9ydHMuaW1wb3J0LmVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNELFNBQVNBLE1BQU1DLEdBQUcsRUFBRUMsSUFBSSxFQUFFQyxLQUFLO0lBQzdCLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQ0QsS0FBS0UsR0FBRyxDQUFDTCxLQUFLRSxRQUFRRDtBQUN4QztBQUVBLE1BQU1LLG1CQUFtQkM7SUFDdkJDLFlBQVlDLEtBQUssQ0FBRTtRQUNqQixLQUFLLENBQUMsQ0FBQyx3QkFBd0IsRUFBRUEsTUFBTSxDQUFDLENBQUM7SUFDM0M7QUFDRjtBQUNBLElBQUlDLGVBQWVKO0FBRW5COzs7O0NBSUMsR0FDRCxTQUFTSyxZQUFZRixLQUFLO0lBQ3hCLElBQUksT0FBT0EsVUFBVSxVQUFVLE1BQU0sSUFBSUMsYUFBYUQ7SUFDdEQsSUFBSUEsTUFBTUcsSUFBSSxHQUFHQyxXQUFXLE9BQU8sZUFBZSxPQUFPO1FBQUM7UUFBRztRQUFHO1FBQUc7S0FBRTtJQUNyRSxJQUFJQyxrQkFBa0JMLE1BQU1HLElBQUk7SUFDaENFLGtCQUFrQkMsZ0JBQWdCQyxJQUFJLENBQUNQLFNBQVNRLFVBQVVSLFNBQVNBO0lBQ25FLE1BQU1TLGtCQUFrQkMsZ0JBQWdCQyxJQUFJLENBQUNOO0lBQzdDLElBQUlJLGlCQUFpQjtRQUNuQixNQUFNRyxNQUFNQyxNQUFNQyxJQUFJLENBQUNMLGlCQUFpQk0sS0FBSyxDQUFDO1FBQzlDLE9BQU87ZUFBSUgsSUFBSUcsS0FBSyxDQUFDLEdBQUcsR0FBR0MsR0FBRyxDQUFDQyxDQUFBQSxJQUFLQyxTQUFTQyxFQUFFRixHQUFHLElBQUk7WUFBTUMsU0FBU0MsRUFBRVAsR0FBRyxDQUFDLEVBQUUsSUFBSSxLQUFLLElBQUksTUFBTTtTQUFJO0lBQ3RHO0lBQ0EsTUFBTVEsV0FBV0MsU0FBU1YsSUFBSSxDQUFDTjtJ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QUNELFNBQVNvSSxTQUFTcEksS0FBSyxFQUFFcUQsTUFBTTtJQUM3QixPQUFPNEIsV0FBV2pGLE9BQU8sQ0FBQ3FEO0FBQzVCO0FBRUE7O0NBRUMsR0FDRCxTQUFTZ0YsTUFBTXJJLEtBQUs7SUFDbEIsTUFBTSxDQUFDbUIsR0FBR21FLEdBQUdDLEdBQUd6RCxFQUFFLEdBQUc1QixZQUFZRjtJQUNqQyxJQUFJZ0QsTUFBTS9CLENBQUFBO1FBQ1IsTUFBTVUsSUFBSXJDLE1BQU0sR0FBRyxLQUFLMkIsR0FBR2dDLFFBQVEsQ0FBQztRQUNwQyxnRUFBZ0U7UUFDaEUsbURBQW1EO1FBQ25ELE9BQU90QixFQUFFVSxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsRUFBRVYsRUFBRSxDQUFDLEdBQUdBO0lBQ3BDO0lBQ0EsT0FBTyxDQUFDLENBQUMsRUFBRXFCLElBQUk3QixHQUFHLEVBQUU2QixJQUFJc0MsR0FBRyxFQUFFdEMsSUFBSXVDLEdBQUcsRUFBRXpELElBQUksSUFBSWtCLElBQUl0RCxLQUFLK0QsS0FBSyxDQUFDM0IsSUFBSSxRQUFRLEdBQUcsQ0FBQztBQUMvRTtBQUVBOztDQUVDLEdBQ0QsU0FBU3dHLE9BQU90SSxLQUFLO0lBQ25CLE9BQU82RixRQUFRM0YsWUFBWUY7QUFDN0I7QUFFQTs7Q0FFQyxHQUNELFNBQVN1SSxPQUFPdkksS0FBSztJQUNuQixPQUFPNEUsUUFBUUosWUFBWXhFO0FBQzdCO0FBRW9SLENBQ3BSLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2cvLi9ub2RlX21vZHVsZXMvY29sb3Iyay9kaXN0L2luZGV4LmV4cG9ydHMuaW1wb3J0LmVzLm1qcz82ZGU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBzaW1wbGUgZ3VhcmQgZnVuY3Rpb246XG4gKlxuICogYGBganNcbiAqIE1hdGgubWluKE1hdGgubWF4KGxvdywgdmFsdWUpLCBoaWdoKVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGd1YXJkKGxvdywgaGlnaCwgdmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KGxvdywgdmFsdWUpLCBoaWdoKTtcbn1cblxuY2xhc3MgQ29sb3JFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoY29sb3IpIHtcbiAgICBzdXBlcihgRmFpbGVkIHRvIHBhcnNlIGNvbG9yOiBcIiR7Y29sb3J9XCJgKTtcbiAgfVxufVxudmFyIENvbG9yRXJyb3IkMSA9IENvbG9yRXJyb3I7XG5cbi8qKlxuICogUGFyc2VzIGEgY29sb3IgaW50byByZWQsIGdyZWUsIGJsdWUsIGFscGhhIHBhcnRzXG4gKlxuICogQHBhcmFtIGNvbG9yIHRoZSBpbnB1dCBjb2xvci4gQ2FuIGJlIGEgUkdCLCBSQkdBLCBIU0wsIEhTTEEsIG9yIG5hbWVkIGNvbG9yXG4gKi9cbmZ1bmN0aW9uIHBhcnNlVG9SZ2JhKGNvbG9yKSB7XG4gIGlmICh0eXBlb2YgY29sb3IgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgQ29sb3JFcnJvciQxKGNvbG9yKTtcbiAgaWYgKGNvbG9yLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09PSAndHJhbnNwYXJlbnQnKSByZXR1cm4gWzAsIDAsIDAsIDBdO1xuICBsZXQgbm9ybWFsaXplZENvbG9yID0gY29sb3IudHJpbSgpO1xuICBub3JtYWxpemVkQ29sb3IgPSBuYW1lZENvbG9yUmVnZXgudGVzdChjb2xvcikgPyBuYW1lVG9IZXgoY29sb3IpIDogY29sb3I7XG4gIGNvbnN0IHJlZHVjZWRIZXhNYXRjaCA9IHJlZHVjZWRIZXhSZWdleC5leGVjKG5vcm1hbGl6ZWRDb2xvcik7XG4gIGlmIChyZWR1Y2VkSGV4TWF0Y2gpIHtcbiAgICBjb25zdCBhcnIgPSBBcnJheS5mcm9tKHJlZHVjZWRIZXhNYXRjaCkuc2xpY2UoMSk7XG4gICAgcmV0dXJuIFsuLi5hcnIuc2xpY2UoMCwgMykubWFwKHggPT4gcGFyc2VJbnQocih4LCAyKSwgMTYpKSwgcGFyc2VJbnQocihhcnJbM10gfHwgJ2YnLCAyKSwgMTYpIC8gMjU1XTtcbiAgfVxuICBjb25zdCBoZXhNYXRjaCA9IGhleFJlZ2V4LmV4ZWMobm9ybWFsaXplZENvbG9yKTtcbiAgaWYgKGhleE1hdGNoKSB7XG4gICAgY29uc3QgYXJyID0gQXJyYXkuZnJvbShoZXhNYXRjaCkuc2xpY2UoMSk7XG4gICAgcmV0dXJuIFsuLi5hcnIuc2xpY2UoMCwgMykubWFwKHggPT4gcGFyc2VJbnQoeCwgMTYpKSwgcGFyc2VJbnQoYXJyWzNdIHx8ICdmZicsIDE2KSAvIDI1NV07XG4gIH1cbiAgY29uc3QgcmdiYU1hdGNoID0gcmdiYVJlZ2V4LmV4ZWMobm9ybWFsaXplZENvbG9yKTtcbiAgaWYgKHJnYmFNYXRjaCkge1xuICAgIGNvbnN0IGFyciA9IEFycmF5LmZyb20ocmdiYU1hdGNoKS5zbGljZSgxKTtcbiAgICByZXR1cm4gWy4uLmFyci5zbGljZSgwLCAzKS5tYXAoeCA9PiBwYXJzZUludCh4LCAxMCkpLCBwYXJzZUZsb2F0KGFyclszXSB8fCAnMScpXTtcbiAgfVxuICBjb25zdCBoc2xhTWF0Y2ggPSBoc2xhUmVnZXguZXhlYyhub3JtYWxpemVkQ29sb3IpO1xuICBpZiAoaHNsYU1hdGNoKSB7XG4gICAgY29uc3QgW2gsIHMsIGwsIGFdID0gQXJyYXkuZnJvbShoc2xhTWF0Y2gpLnNsaWNlKDEpLm1hcChwYXJzZUZsb2F0KTtcbiAgICBpZiAoZ3VhcmQoMCwgMTAwLCBzKSAhPT0gcykgdGhyb3cgbmV3IENvbG9yRXJyb3IkMShjb2xvcik7XG4gICAgaWYgKGd1YXJkKDAsIDEwMCwgbCkgIT09IGwpIHRocm93IG5ldyBDb2xvckVycm9yJDEoY29sb3IpO1xuICAgIHJldHVybiBbLi4uaHNsVG9SZ2IoaCwgcywgbCksIE51bWJlci5pc05hTihhKSA/IDEgOiBhXTtcbiAgfVxuICB0aHJvdyBuZXcgQ29sb3JFcnJvciQxKGNvbG9yKTtcbn1cbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gIGxldCBoYXNoID0gNTM4MTtcbiAgbGV0IGkgPSBzdHIubGVuZ3RoO1xuICB3aGlsZSAoaSkge1xuICAgIGhhc2ggPSBoYXNoICogMzMgXiBzdHIuY2hhckNvZGVBdCgtLWkpO1xuICB9XG5cbiAgLyogSmF2YVNjcmlwdCBkb2VzIGJpdHdpc2Ugb3BlcmF0aW9ucyAobGlrZSBYT1IsIGFib3ZlKSBvbiAzMi1iaXQgc2lnbmVkXG4gICAqIGludGVnZXJzLiBTaW5jZSB3ZSB3YW50IHRoZSByZXN1bHRzIHRvIGJlIGFsd2F5cyBwb3NpdGl2ZSwgY29udmVydCB0aGVcbiAgICogc2lnbmVkIGludCB0byBhbiB1bnNpZ25lZCBieSBkb2luZyBhbiB1bnNpZ25lZCBiaXRzaGlmdC4gKi9cbiAgcmV0dXJuIChoYXNoID4+PiAwKSAlIDIzNDE7XG59XG5jb25zdCBjb2xvclRvSW50ID0geCA9PiBwYXJzZUludCh4LnJlcGxhY2UoL18vZywgJycpLCAzNik7XG5jb25zdCBjb21wcmVzc2VkQ29sb3JNYXAgPSAnMXEyOWVoaGIgMW4wOXNnazcgMWtsMWVrZl8gX3lsNHpzbm8gMTZ6OWVpdjMgMXAyOWxocDggX2JkOXpnMDQgMTd1MF9fX18gX2l3OXpoZTUgX3RvNzNfX18gX3I0NWUzMWUgXzdsNmcwMTYgX2poOG91aXYgX3puM3FiYTggMWp5NHpzaHMgMTF1ODdrMHUgMXJvOXl2eW8gMWFqM3hhZWwgMWd6OXpqejAgXzN3OGw0eG8gMWJmMWVrZl8gX2tlM3ZfX18gXzRycmtiX18gMTNqNzc2eXogXzY0Nm1iaGwgX25yanI0X18gX2xlNm1iaGwgMW4zN2Voa2IgX203NWY5MW4gX3FqM2J6ZnogMTkzOXl5Z3cgMTFpNXo2eDggXzFrNWY4eHMgMTUwOTQ0MW0gMTV0NWx3Z2YgX2FlMnRoMW4gX3RnMXVnY3YgMWxwMXVnY3YgMTZlMTR1cF8gX2g1NXJ3N24gX255OXlhdm4gXzdhMTF4Yl8gMWloNDQyZzkgX3B2NDQyZzkgMW12MTZ4b2YgMTRlNnk3dHUgMW9vOXprZHMgMTdkMWNpc2kgXzR2OXk3MGYgX3k5OG04a2MgMTAxOXBxMHYgMTJvOXpkYTggXzM0OGo0ZjQgMWV0NTBpMm8gXzhlcGE4X18gX3RzNnNlbmogMW8zNTBpMm8gMW1pOWVpdW8gMTI1OXlycDAgMWxuODBnbncgXzYzMnhjb3kgMWNuOXpsZGMgX2YyOWVkdTQgMW40OTBjOHEgXzlmOXppZXQgMWI5NHZrNzQgX200OXprY3QgMWt6NnM3M2EgMWV1OWR0b2cgX3E1OHMxcnogMWR5OXNqaXEgX191ODlqbzMgX2FqNW5rd2cgX2xkODlqbzMgMTNoOXo2d3ggX3FhOXoyaWkgX2wxMTl4Z3EgX2JzNWFyanUgMWhqNG53azkgMXF0NG53azkgMWdlNndhdTYgMTRqOXpsY3cgMTFwMWVkY18gX21zMXpjeGUgXzQzOXNoazYgX2p0OXk3MGYgXzc1NHpzb3cgMWxhNDBlanUgX29xNXBfX18gX3gyNzlxa3ogMWZhNXIzcnYgX3lkMmQ5aXAgXzQyNHRja3UgXzh5MWRpMl8gX3ppMnVhYncgX3l5N3JuOWggMTJ5ejk4MF8gX18zOWxqcDYgMWI1OXpnMHggX24zOXpmenAgMWZ5OXplc3QgX2IzM2tfX18gX2hwOXdxOTIgMWlsNTBoejQgX2lvNDcydWIgX2xqOXozZW8gMTl6OXlrZzAgXzh0OGl1M2EgMTJiOWJsNGEgMWFrNXl3MG8gXzg5NnY0a3UgX3RiOGs4bHYgX3M1OXppNnQgX2MwOXplMHAgMWxnODBvcW4gMWlkOXo4d2IgXzIzOG5iYTUgMWtxNndnZGkgXzE1NHpzc2cgX3RuM3prNDkgX2RhOXk2dGMgMXNnN2N2NGYgX3IxMmp2dHQgMWdxNWZta3ogMWNzOXJ2Y2kgX2xwOWpuMWMgX3h3MXRkbmIgMTNmOXpqZTYgMTZmNjk3M2ggX3ZvN2lyNDAgX2J0NWFyamYgX3JjNDVlNHQgX2hyNGUxMDAgMTB2NGUxMDAgX2hjOXprZTIgX3c5MWVndl8gX3NqMnIxa2sgMTNjODd5eDggX3ZxcGRzX18gX25pOGdnazggX3RqOXlxZmIgMWlhMmo0cjQgXzd4OWIxMHUgMWZjOWxkNGogMWVxOXpsZHIgXzVqOWxocHggX2V6OXpsNm8gX21kNjFmem0nLnNwbGl0KCcgJykucmVkdWNlKChhY2MsIG5leHQpID0+IHtcbiAgY29uc3Qga2V5ID0gY29sb3JUb0ludChuZXh0LnN1YnN0cmluZygwLCAzKSk7XG4gIGNvbnN0IGhleCA9IGNvbG9yVG9JbnQobmV4dC5zdWJzdHJpbmcoMykpLnRvU3RyaW5nKDE2KTtcblxuICAvLyBOT1RFOiBwYWRTdGFydCBjb3VsZCBiZSB1c2VkIGhlcmUgYnV0IGl0IGJyZWFrcyBOb2RlIDYgY29tcGF0XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yaWNva2FobGVyL2NvbG9yMmsvaXNzdWVzLzM1MVxuICBsZXQgcHJlZml4ID0gJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNiAtIGhleC5sZW5ndGg7IGkrKykge1xuICAgIHByZWZpeCArPSAnMCc7XG4gIH1cbiAgYWNjW2tleV0gPSBgJHtwcmVmaXh9JHtoZXh9YDtcbiAgcmV0dXJuIGFjYztcbn0sIHt9KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdHJpbmcgaXMgYSBDU1MgbmFtZWQgY29sb3IgYW5kIHJldHVybnMgaXRzIGVxdWl2YWxlbnQgaGV4IHZhbHVlLCBvdGhlcndpc2UgcmV0dXJucyB0aGUgb3JpZ2luYWwgY29sb3IuXG4gKi9cbmZ1bmN0aW9uIG5hbWVUb0hleChjb2xvcikge1xuICBjb25zdCBub3JtYWxpemVkQ29sb3JOYW1lID0gY29sb3IudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gIGNvbnN0IHJlc3VsdCA9IGNvbXByZXNzZWRDb2xvck1hcFtoYXNoKG5vcm1hbGl6ZWRDb2xvck5hbWUpXTtcbiAgaWYgKCFyZXN1bHQpIHRocm93IG5ldyBDb2xvckVycm9yJDEoY29sb3IpO1xuICByZXR1cm4gYCMke3Jlc3VsdH1gO1xufVxuY29uc3QgciA9IChzdHIsIGFtb3VudCkgPT4gQXJyYXkuZnJvbShBcnJheShhbW91bnQpKS5tYXAoKCkgPT4gc3RyKS5qb2luKCcnKTtcbmNvbnN0IHJlZHVjZWRIZXhSZWdleCA9IG5ldyBSZWdFeHAoYF4jJHtyKCcoW2EtZjAtOV0pJywgMyl9KFthLWYwLTldKT8kYCwgJ2knKTtcbmNvbnN0IGhleFJlZ2V4ID0gbmV3IFJlZ0V4cChgXiMke3IoJyhbYS1mMC05XXsyfSknLCAzKX0oW2EtZjAtOV17Mn0pPyRgLCAnaScpO1xuY29uc3QgcmdiYVJlZ2V4ID0gbmV3IFJlZ0V4cChgXnJnYmE/XFxcXChcXFxccyooXFxcXGQrKVxcXFxzKiR7cignLFxcXFxzKihcXFxcZCspXFxcXHMqJywgMil9KD86LFxcXFxzKihbXFxcXGQuXSspKT9cXFxccypcXFxcKSRgLCAnaScpO1xuY29uc3QgaHNsYVJlZ2V4ID0gL15oc2xhP1xcKFxccyooW1xcZC5dKylcXHMqLFxccyooW1xcZC5dKyklXFxzKixcXHMqKFtcXGQuXSspJSg/OlxccyosXFxzKihbXFxkLl0rKSk/XFxzKlxcKSQvaTtcbmNvbnN0IG5hbWVkQ29sb3JSZWdleCA9IC9eW2Etel0rJC9pO1xuY29uc3Qgcm91bmRDb2xvciA9IGNvbG9yID0+IHtcbiAgcmV0dXJuIE1hdGgucm91bmQoY29sb3IgKiAyNTUpO1xufTtcbmNvbnN0IGhzbFRvUmdiID0gKGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzKSA9PiB7XG4gIGxldCBsID0gbGlnaHRuZXNzIC8gMTAwO1xuICBpZiAoc2F0dXJhdGlvbiA9PT0gMCkge1xuICAgIC8vIGFjaHJvbWF0aWNcbiAgICByZXR1cm4gW2wsIGwsIGxdLm1hcChyb3VuZENvbG9yKTtcbiAgfVxuXG4gIC8vIGZvcm11bGFlIGZyb20gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSFNMX2FuZF9IU1ZcbiAgY29uc3QgaHVlUHJpbWUgPSAoaHVlICUgMzYwICsgMzYwKSAlIDM2MCAvIDYwO1xuICBjb25zdCBjaHJvbWEgPSAoMSAtIE1hdGguYWJzKDIgKiBsIC0gMSkpICogKHNhdHVyYXRpb24gLyAxMDApO1xuICBjb25zdCBzZWNvbmRDb21wb25lbnQgPSBjaHJvbWEgKiAoMSAtIE1hdGguYWJzKGh1ZVByaW1lICUgMiAtIDEpKTtcbiAgbGV0IHJlZCA9IDA7XG4gIGxldCBncmVlbiA9IDA7XG4gIGxldCBibHVlID0gMDtcbiAgaWYgKGh1ZVByaW1lID49IDAgJiYgaHVlUHJpbWUgPCAxKSB7XG4gICAgcmVkID0gY2hyb21hO1xuICAgIGdyZWVuID0gc2Vjb25kQ29tcG9uZW50O1xuICB9IGVsc2UgaWYgKGh1ZVByaW1lID49IDEgJiYgaHVlUHJpbWUgPCAyKSB7XG4gICAgcmVkID0gc2Vjb25kQ29tcG9uZW50O1xuICAgIGdyZWVuID0gY2hyb21hO1xuICB9IGVsc2UgaWYgKGh1ZVByaW1lID49IDIgJiYgaHVlUHJpbWUgPCAzKSB7XG4gICAgZ3JlZW4gPSBjaHJvbWE7XG4gICAgYmx1ZSA9IHNlY29uZENvbXBvbmVudDtcbiAgfSBlbHNlIGlmIChodWVQcmltZSA+PSAzICYmIGh1ZVByaW1lIDwgNCkge1xuICAgIGdyZWVuID0gc2Vjb25kQ29tcG9uZW50O1xuICAgIGJsdWUgPSBjaHJvbWE7XG4gIH0gZWxzZSBpZiAoaHVlUHJpbWUgPj0gNCAmJiBodWVQcmltZSA8IDUpIHtcbiAgICByZWQgPSBzZWNvbmRDb21wb25lbnQ7XG4gICAgYmx1ZSA9IGNocm9tYTtcbiAgfSBlbHNlIGlmIChodWVQcmltZSA+PSA1ICYmIGh1ZVByaW1lIDwgNikge1xuICAgIHJlZCA9IGNocm9tYTtcbiAgICBibHVlID0gc2Vjb25kQ29tcG9uZW50O1xuICB9XG4gIGNvbnN0IGxpZ2h0bmVzc01vZGlmaWNhdGlvbiA9IGwgLSBjaHJvbWEgLyAyO1xuICBjb25zdCBmaW5hbFJlZCA9IHJlZCArIGxpZ2h0bmVzc01vZGlmaWNhdGlvbjtcbiAgY29uc3QgZmluYWxHcmVlbiA9IGdyZWVuICsgbGlnaHRuZXNzTW9kaWZpY2F0aW9uO1xuICBjb25zdCBmaW5hbEJsdWUgPSBibHVlICsgbGlnaHRuZXNzTW9kaWZpY2F0aW9uO1xuICByZXR1cm4gW2ZpbmFsUmVkLCBmaW5hbEdyZWVuLCBmaW5hbEJsdWVdLm1hcChyb3VuZENvbG9yKTtcbn07XG5cbi8vIHRha2VuIGZyb206XG5cbi8qKlxuICogUGFyc2VzIGEgY29sb3IgaW4gaHVlLCBzYXR1cmF0aW9uLCBsaWdodG5lc3MsIGFuZCB0aGUgYWxwaGEgY2hhbm5lbC5cbiAqXG4gKiBIdWUgaXMgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAzNjAsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcywgYW5kIGFscGhhIGFyZVxuICogZGVjaW1hbCBwZXJjZW50YWdlcyBiZXR3ZWVuIDAgYW5kIDFcbiAqL1xuZnVuY3Rpb24gcGFyc2VUb0hzbGEoY29sb3IpIHtcbiAgY29uc3QgW3JlZCwgZ3JlZW4sIGJsdWUsIGFscGhhXSA9IHBhcnNlVG9SZ2JhKGNvbG9yKS5tYXAoKHZhbHVlLCBpbmRleCkgPT5cbiAgLy8gM3JkIGluZGV4IGlzIGFscGhhIGNoYW5uZWwgd2hpY2ggaXMgYWxyZWFkeSBub3JtYWxpemVkXG4gIGluZGV4ID09PSAzID8gdmFsdWUgOiB2YWx1ZSAvIDI1NSk7XG4gIGNvbnN0IG1heCA9IE1hdGgubWF4KHJlZCwgZ3JlZW4sIGJsdWUpO1xuICBjb25zdCBtaW4gPSBNYXRoLm1pbihyZWQsIGdyZWVuLCBibHVlKTtcbiAgY29uc3QgbGlnaHRuZXNzID0gKG1heCArIG1pbikgLyAyO1xuXG4gIC8vIGFjaHJvbWF0aWNcbiAgaWYgKG1heCA9PT0gbWluKSByZXR1cm4gWzAsIDAsIGxpZ2h0bmVzcywgYWxwaGFdO1xuICBjb25zdCBkZWx0YSA9IG1heCAtIG1pbjtcbiAgY29uc3Qgc2F0dXJhdGlvbiA9IGxpZ2h0bmVzcyA+IDAuNSA/IGRlbHRhIC8gKDIgLSBtYXggLSBtaW4pIDogZGVsdGEgLyAobWF4ICsgbWluKTtcbiAgY29uc3QgaHVlID0gNjAgKiAocmVkID09PSBtYXggPyAoZ3JlZW4gLSBibHVlKSAvIGRlbHRhICsgKGdyZWVuIDwgYmx1ZSA/IDYgOiAwKSA6IGdyZWVuID09PSBtYXggPyAoYmx1ZSAtIHJlZCkgLyBkZWx0YSArIDIgOiAocmVkIC0gZ3JlZW4pIC8gZGVsdGEgKyA0KTtcbiAgcmV0dXJuIFtodWUsIHNhdHVyYXRpb24sIGxpZ2h0bmVzcywgYWxwaGFdO1xufVxuXG4vKipcbiAqIFRha2VzIGluIGhzbGEgcGFydHMgYW5kIGNvbnN0cnVjdHMgYW4gaHNsYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0gaHVlIFRoZSBjb2xvciBjaXJjbGUgKGZyb20gMCB0byAzNjApIC0gMCAob3IgMzYwKSBpcyByZWQsIDEyMCBpcyBncmVlbiwgMjQwIGlzIGJsdWVcbiAqIEBwYXJhbSBzYXR1cmF0aW9uIFBlcmNlbnRhZ2Ugb2Ygc2F0dXJhdGlvbiwgZ2l2ZW4gYXMgYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMVxuICogQHBhcmFtIGxpZ2h0bmVzcyBQZXJjZW50YWdlIG9mIGxpZ2h0bmVzcywgZ2l2ZW4gYXMgYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMVxuICogQHBhcmFtIGFscGhhIFBlcmNlbnRhZ2Ugb2Ygb3BhY2l0eSwgZ2l2ZW4gYXMgYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMVxuICovXG5mdW5jdGlvbiBoc2xhKGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzLCBhbHBoYSkge1xuICByZXR1cm4gYGhzbGEoJHsoaHVlICUgMzYwKS50b0ZpeGVkKCl9LCAke2d1YXJkKDAsIDEwMCwgc2F0dXJhdGlvbiAqIDEwMCkudG9GaXhlZCgpfSUsICR7Z3VhcmQoMCwgMTAwLCBsaWdodG5lc3MgKiAxMDApLnRvRml4ZWQoKX0lLCAke3BhcnNlRmxvYXQoZ3VhcmQoMCwgMSwgYWxwaGEpLnRvRml4ZWQoMykpfSlgO1xufVxuXG4vKipcbiAqIEFkanVzdHMgdGhlIGN1cnJlbnQgaHVlIG9mIHRoZSBjb2xvciBieSB0aGUgZ2l2ZW4gZGVncmVlcy4gV3JhcHMgYXJvdW5kIHdoZW5cbiAqIG92ZXIgMzYwLlxuICpcbiAqIEBwYXJhbSBjb2xvciBpbnB1dCBjb2xvclxuICogQHBhcmFtIGRlZ3JlZXMgZGVncmVlcyB0byBhZGp1c3QgdGhlIGlucHV0IGNvbG9yLCBhY2NlcHRzIGRlZ3JlZSBpbnRlZ2Vyc1xuICogKDAgLSAzNjApIGFuZCB3cmFwcyBhcm91bmQgb24gb3ZlcmZsb3dcbiAqL1xuZnVuY3Rpb24gYWRqdXN0SHVlKGNvbG9yLCBkZWdyZWVzKSB7XG4gIGNvbnN0IFtoLCBzLCBsLCBhXSA9IHBhcnNlVG9Ic2xhKGNvbG9yKTtcbiAgcmV0dXJuIGhzbGEoaCArIGRlZ3JlZXMsIHMsIGwsIGEpO1xufVxuXG4vKipcbiAqIERhcmtlbnMgdXNpbmcgbGlnaHRuZXNzLiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gc3VidHJhY3RpbmcgdGhlIGxpZ2h0bmVzc1xuICogZnJvbSB0aGUgTCBpbiBIU0wuXG4gKlxuICogQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHRvIGRhcmtlbiwgZ2l2ZW4gYXMgYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMVxuICovXG5mdW5jdGlvbiBkYXJrZW4oY29sb3IsIGFtb3VudCkge1xuICBjb25zdCBbaHVlLCBzYXR1cmF0aW9uLCBsaWdodG5lc3MsIGFscGhhXSA9IHBhcnNlVG9Ic2xhKGNvbG9yKTtcbiAgcmV0dXJuIGhzbGEoaHVlLCBzYXR1cmF0aW9uLCBsaWdodG5lc3MgLSBhbW91bnQsIGFscGhhKTtcbn1cblxuLyoqXG4gKiBEZXNhdHVyYXRlcyB0aGUgaW5wdXQgY29sb3IgYnkgdGhlIGdpdmVuIGFtb3VudCB2aWEgc3VidHJhY3RpbmcgZnJvbSB0aGUgYHNgXG4gKiBpbiBgaHNsYWAuXG4gKlxuICogQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHRvIGRlc2F0dXJhdGUsIGdpdmVuIGFzIGEgZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDFcbiAqL1xuZnVuY3Rpb24gZGVzYXR1cmF0ZShjb2xvciwgYW1vdW50KSB7XG4gIGNvbnN0IFtoLCBzLCBsLCBhXSA9IHBhcnNlVG9Ic2xhKGNvbG9yKTtcbiAgcmV0dXJuIGhzbGEoaCwgcyAtIGFtb3VudCwgbCwgYSk7XG59XG5cbi8vIHRha2VuIGZyb206XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc3R5bGVkLWNvbXBvbmVudHMvcG9saXNoZWQvYmxvYi8wNzY0Yzk4MjU1MWI0ODc0NjkwNDNhY2I1NjI4MWIwMzU4YjMxMDdiL3NyYy9jb2xvci9nZXRMdW1pbmFuY2UuanNcblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIChmbG9hdCkgcmVwcmVzZW50aW5nIHRoZSBsdW1pbmFuY2Ugb2YgYSBjb2xvci5cbiAqL1xuZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIGlmIChjb2xvciA9PT0gJ3RyYW5zcGFyZW50JykgcmV0dXJuIDA7XG4gIGZ1bmN0aW9uIGYoeCkge1xuICAgIGNvbnN0IGNoYW5uZWwgPSB4IC8gMjU1O1xuICAgIHJldHVybiBjaGFubmVsIDw9IDAuMDM5MjggPyBjaGFubmVsIC8gMTIuOTIgOiBNYXRoLnBvdygoY2hhbm5lbCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICB9XG4gIGNvbnN0IFtyLCBnLCBiXSA9IHBhcnNlVG9SZ2JhKGNvbG9yKTtcbiAgcmV0dXJuIDAuMjEyNiAqIGYocikgKyAwLjcxNTIgKiBmKGcpICsgMC4wNzIyICogZihiKTtcbn1cblxuLy8gdGFrZW4gZnJvbTpcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMgYmFzZWQgb25cbiAqIFtXMydzIHJlY29tbWVuZGVkIGVxdWF0aW9uIGZvciBjYWxjdWxhdGluZyBjb250cmFzdF0oaHR0cDovL3d3dy53My5vcmcvVFIvV0NBRzIwLyNjb250cmFzdC1yYXRpb2RlZikuXG4gKi9cbmZ1bmN0aW9uIGdldENvbnRyYXN0KGNvbG9yMSwgY29sb3IyKSB7XG4gIGNvbnN0IGx1bWluYW5jZTEgPSBnZXRMdW1pbmFuY2UoY29sb3IxKTtcbiAgY29uc3QgbHVtaW5hbmNlMiA9IGdldEx1bWluYW5jZShjb2xvcjIpO1xuICByZXR1cm4gbHVtaW5hbmNlMSA+IGx1bWluYW5jZTIgPyAobHVtaW5hbmNlMSArIDAuMDUpIC8gKGx1bWluYW5jZTIgKyAwLjA1KSA6IChsdW1pbmFuY2UyICsgMC4wNSkgLyAobHVtaW5hbmNlMSArIDAuMDUpO1xufVxuXG4vKipcbiAqIFRha2VzIGluIHJnYmEgcGFydHMgYW5kIHJldHVybnMgYW4gcmdiYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0gcmVkIFRoZSBhbW91bnQgb2YgcmVkIGluIHRoZSByZWQgY2hhbm5lbCwgZ2l2ZW4gaW4gYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAyNTUgaW5jbHVzaXZlXG4gKiBAcGFyYW0gZ3JlZW4gVGhlIGFtb3VudCBvZiBncmVlbiBpbiB0aGUgcmVkIGNoYW5uZWwsIGdpdmVuIGluIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMjU1IGluY2x1c2l2ZVxuICogQHBhcmFtIGJsdWUgVGhlIGFtb3VudCBvZiBibHVlIGluIHRoZSByZWQgY2hhbm5lbCwgZ2l2ZW4gaW4gYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAyNTUgaW5jbHVzaXZlXG4gKiBAcGFyYW0gYWxwaGEgUGVyY2VudGFnZSBvZiBvcGFjaXR5LCBnaXZlbiBhcyBhIGRlY2ltYWwgYmV0d2VlbiAwIGFuZCAxXG4gKi9cbmZ1bmN0aW9uIHJnYmEocmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEpIHtcbiAgcmV0dXJuIGByZ2JhKCR7Z3VhcmQoMCwgMjU1LCByZWQpLnRvRml4ZWQoKX0sICR7Z3VhcmQoMCwgMjU1LCBncmVlbikudG9GaXhlZCgpfSwgJHtndWFyZCgwLCAyNTUsIGJsdWUpLnRvRml4ZWQoKX0sICR7cGFyc2VGbG9hdChndWFyZCgwLCAxLCBhbHBoYSkudG9GaXhlZCgzKSl9KWA7XG59XG5cbi8qKlxuICogTWl4ZXMgdHdvIGNvbG9ycyB0b2dldGhlci4gVGFrZW4gZnJvbSBzYXNzJ3MgaW1wbGVtZW50YXRpb24uXG4gKi9cbmZ1bmN0aW9uIG1peChjb2xvcjEsIGNvbG9yMiwgd2VpZ2h0KSB7XG4gIGNvbnN0IG5vcm1hbGl6ZSA9IChuLCBpbmRleCkgPT5cbiAgLy8gM3JkIGluZGV4IGlzIGFscGhhIGNoYW5uZWwgd2hpY2ggaXMgYWxyZWFkeSBub3JtYWxpemVkXG4gIGluZGV4ID09PSAzID8gbiA6IG4gLyAyNTU7XG4gIGNvbnN0IFtyMSwgZzEsIGIxLCBhMV0gPSBwYXJzZVRvUmdiYShjb2xvcjEpLm1hcChub3JtYWxpemUpO1xuICBjb25zdCBbcjIsIGcyLCBiMiwgYTJdID0gcGFyc2VUb1JnYmEoY29sb3IyKS5tYXAobm9ybWFsaXplKTtcblxuICAvLyBUaGUgZm9ybXVsYSBpcyBjb3BpZWQgZnJvbSB0aGUgb3JpZ2luYWwgU2FzcyBpbXBsZW1lbnRhdGlvbjpcbiAgLy8gaHR0cDovL3Nhc3MtbGFuZy5jb20vZG9jdW1lbnRhdGlvbi9TYXNzL1NjcmlwdC9GdW5jdGlvbnMuaHRtbCNtaXgtaW5zdGFuY2VfbWV0aG9kXG4gIGNvbnN0IGFscGhhRGVsdGEgPSBhMiAtIGExO1xuICBjb25zdCBub3JtYWxpemVkV2VpZ2h0ID0gd2VpZ2h0ICogMiAtIDE7XG4gIGNvbnN0IGNvbWJpbmVkV2VpZ2h0ID0gbm9ybWFsaXplZFdlaWdodCAqIGFscGhhRGVsdGEgPT09IC0xID8gbm9ybWFsaXplZFdlaWdodCA6IG5vcm1hbGl6ZWRXZWlnaHQgKyBhbHBoYURlbHRhIC8gKDEgKyBub3JtYWxpemVkV2VpZ2h0ICogYWxwaGFEZWx0YSk7XG4gIGNvbnN0IHdlaWdodDIgPSAoY29tYmluZWRXZWlnaHQgKyAxKSAvIDI7XG4gIGNvbnN0IHdlaWdodDEgPSAxIC0gd2VpZ2h0MjtcbiAgY29uc3QgciA9IChyMSAqIHdlaWdodDEgKyByMiAqIHdlaWdodDIpICogMjU1O1xuICBjb25zdCBnID0gKGcxICogd2VpZ2h0MSArIGcyICogd2VpZ2h0MikgKiAyNTU7XG4gIGNvbnN0IGIgPSAoYjEgKiB3ZWlnaHQxICsgYjIgKiB3ZWlnaHQyKSAqIDI1NTtcbiAgY29uc3QgYSA9IGEyICogd2VpZ2h0ICsgYTEgKiAoMSAtIHdlaWdodCk7XG4gIHJldHVybiByZ2JhKHIsIGcsIGIsIGEpO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgc2VyaWVzIGNvbG9ycywgdGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBhIGBzY2FsZSh4KWAgZnVuY3Rpb24gdGhhdFxuICogYWNjZXB0cyBhIHBlcmNlbnRhZ2UgYXMgYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMSBhbmQgcmV0dXJucyB0aGUgY29sb3IgYXRcbiAqIHRoYXQgcGVyY2VudGFnZSBpbiB0aGUgc2NhbGUuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHNjYWxlID0gZ2V0U2NhbGUoJ3JlZCcsICd5ZWxsb3cnLCAnZ3JlZW4nKTtcbiAqIGNvbnNvbGUubG9nKHNjYWxlKDApKTsgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gKiBjb25zb2xlLmxvZyhzY2FsZSgwLjUpKTsgLy8gcmdiYSgyNTUsIDI1NSwgMCwgMSlcbiAqIGNvbnNvbGUubG9nKHNjYWxlKDEpKTsgLy8gcmdiYSgwLCAxMjgsIDAsIDEpXG4gKiBgYGBcbiAqXG4gKiBJZiB5b3UnZCBsaWtlIHRvIGxpbWl0IHRoZSBkb21haW4gYW5kIHJhbmdlIGxpa2UgY2hyb21hLWpzLCB3ZSByZWNvbW1lbmRcbiAqIHdyYXBwaW5nIHNjYWxlIGFnYWluLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBfc2NhbGUgPSBnZXRTY2FsZSgncmVkJywgJ3llbGxvdycsICdncmVlbicpO1xuICogY29uc3Qgc2NhbGUgPSB4ID0+IF9zY2FsZSh4IC8gMTAwKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhzY2FsZSgwKSk7IC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICogY29uc29sZS5sb2coc2NhbGUoNTApKTsgLy8gcmdiYSgyNTUsIDI1NSwgMCwgMSlcbiAqIGNvbnNvbGUubG9nKHNjYWxlKDEwMCkpOyAvLyByZ2JhKDAsIDEyOCwgMCwgMSlcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBnZXRTY2FsZSguLi5jb2xvcnMpIHtcbiAgcmV0dXJuIG4gPT4ge1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IGNvbG9ycy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGxvd0luZGV4ID0gZ3VhcmQoMCwgbGFzdEluZGV4LCBNYXRoLmZsb29yKG4gKiBsYXN0SW5kZXgpKTtcbiAgICBjb25zdCBoaWdoSW5kZXggPSBndWFyZCgwLCBsYXN0SW5kZXgsIE1hdGguY2VpbChuICogbGFzdEluZGV4KSk7XG4gICAgY29uc3QgY29sb3IxID0gY29sb3JzW2xvd0luZGV4XTtcbiAgICBjb25zdCBjb2xvcjIgPSBjb2xvcnNbaGlnaEluZGV4XTtcbiAgICBjb25zdCB1bml0ID0gMSAvIGxhc3RJbmRleDtcbiAgICBjb25zdCB3ZWlnaHQgPSAobiAtIHVuaXQgKiBsb3dJbmRleCkgLyB1bml0O1xuICAgIHJldHVybiBtaXgoY29sb3IxLCBjb2xvcjIsIHdlaWdodCk7XG4gIH07XG59XG5cbmNvbnN0IGd1aWRlbGluZXMgPSB7XG4gIGRlY29yYXRpdmU6IDEuNSxcbiAgcmVhZGFibGU6IDMsXG4gIGFhOiA0LjUsXG4gIGFhYTogN1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGEgY29sb3IgaGFzIGJhZCBjb250cmFzdCBhZ2FpbnN0IGEgYmFja2dyb3VuZFxuICogYWNjb3JkaW5nIHRvIGEgZ2l2ZW4gc3RhbmRhcmQuXG4gKi9cbmZ1bmN0aW9uIGhhc0JhZENvbnRyYXN0KGNvbG9yLCBzdGFuZGFyZCA9ICdhYScsIGJhY2tncm91bmQgPSAnI2ZmZicpIHtcbiAgcmV0dXJuIGdldENvbnRyYXN0KGNvbG9yLCBiYWNrZ3JvdW5kKSA8IGd1aWRlbGluZXNbc3RhbmRhcmRdO1xufVxuXG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IgYnkgYSBnaXZlbiBhbW91bnQuIFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICogYGRhcmtlbihjb2xvciwgLWFtb3VudClgXG4gKlxuICogQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHRvIGRhcmtlbiwgZ2l2ZW4gYXMgYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMVxuICovXG5mdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBhbW91bnQpIHtcbiAgcmV0dXJuIGRhcmtlbihjb2xvciwgLWFtb3VudCk7XG59XG5cbi8qKlxuICogVGFrZXMgaW4gYSBjb2xvciBhbmQgbWFrZXMgaXQgbW9yZSB0cmFuc3BhcmVudCBieSBjb252ZXJ0IHRvIGByZ2JhYCBhbmRcbiAqIGRlY3JlYXNpbmcgdGhlIGFtb3VudCBpbiB0aGUgYWxwaGEgY2hhbm5lbC5cbiAqXG4gKiBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgdG8gaW5jcmVhc2UgdGhlIHRyYW5zcGFyZW5jeSBieSwgZ2l2ZW4gYXMgYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMVxuICovXG5mdW5jdGlvbiB0cmFuc3BhcmVudGl6ZShjb2xvciwgYW1vdW50KSB7XG4gIGNvbnN0IFtyLCBnLCBiLCBhXSA9IHBhcnNlVG9SZ2JhKGNvbG9yKTtcbiAgcmV0dXJuIHJnYmEociwgZywgYiwgYSAtIGFtb3VudCk7XG59XG5cbi8qKlxuICogVGFrZXMgYSBjb2xvciBhbmQgdW4tdHJhbnNwYXJlbnRpemVzIGl0LiBFcXVpdmFsZW50IHRvXG4gKiBgdHJhbnNwYXJlbnRpemUoY29sb3IsIC1hbW91bnQpYFxuICpcbiAqIEBwYXJhbSBhbW91bnQgVGhlIGFtb3VudCB0byBpbmNyZWFzZSB0aGUgb3BhY2l0eSBieSwgZ2l2ZW4gYXMgYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMVxuICovXG5mdW5jdGlvbiBvcGFjaWZ5KGNvbG9yLCBhbW91bnQpIHtcbiAgcmV0dXJuIHRyYW5zcGFyZW50aXplKGNvbG9yLCAtYW1vdW50KTtcbn1cblxuLyoqXG4gKiBBbiBhbHRlcm5hdGl2ZSBmdW5jdGlvbiB0byBgcmVhZGFibGVDb2xvcmAuIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIFxuICogcmVhZGFibGUgY29sb3IgKGkuZS4gdGhlIGNvbG9yIHRvIGJlIHBsYWNlIG9uIHRvcCB0aGUgaW5wdXQgY29sb3IpIHNob3VsZCBiZVxuICogYmxhY2suXG4gKi9cbmZ1bmN0aW9uIHJlYWRhYmxlQ29sb3JJc0JsYWNrKGNvbG9yKSB7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC4xNzk7XG59XG5cbi8qKlxuICogUmV0dXJucyBibGFjayBvciB3aGl0ZSBmb3IgYmVzdCBjb250cmFzdCBkZXBlbmRpbmcgb24gdGhlIGx1bWlub3NpdHkgb2YgdGhlXG4gKiBnaXZlbiBjb2xvci5cbiAqL1xuZnVuY3Rpb24gcmVhZGFibGVDb2xvcihjb2xvcikge1xuICByZXR1cm4gcmVhZGFibGVDb2xvcklzQmxhY2soY29sb3IpID8gJyMwMDAnIDogJyNmZmYnO1xufVxuXG4vKipcbiAqIFNhdHVyYXRlcyBhIGNvbG9yIGJ5IGNvbnZlcnRpbmcgaXQgdG8gYGhzbGAgYW5kIGluY3JlYXNpbmcgdGhlIHNhdHVyYXRpb25cbiAqIGFtb3VudC4gRXF1aXZhbGVudCB0byBgZGVzYXR1cmF0ZShjb2xvciwgLWFtb3VudClgXG4gKiBcbiAqIEBwYXJhbSBjb2xvciBJbnB1dCBjb2xvclxuICogQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHRvIGRhcmtlbiwgZ2l2ZW4gYXMgYSBkZWNpbWFsIGJldHdlZW4gMCBhbmQgMVxuICovXG5mdW5jdGlvbiBzYXR1cmF0ZShjb2xvciwgYW1vdW50KSB7XG4gIHJldHVybiBkZXNhdHVyYXRlKGNvbG9yLCAtYW1vdW50KTtcbn1cblxuLyoqXG4gKiBUYWtlcyBpbiBhbnkgY29sb3IgYW5kIHJldHVybnMgaXQgYXMgYSBoZXggY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9IZXgoY29sb3IpIHtcbiAgY29uc3QgW3IsIGcsIGIsIGFdID0gcGFyc2VUb1JnYmEoY29sb3IpO1xuICBsZXQgaGV4ID0geCA9PiB7XG4gICAgY29uc3QgaCA9IGd1YXJkKDAsIDI1NSwgeCkudG9TdHJpbmcoMTYpO1xuICAgIC8vIE5PVEU6IHBhZFN0YXJ0IGNvdWxkIGJlIHVzZWQgaGVyZSBidXQgaXQgYnJlYWtzIE5vZGUgNiBjb21wYXRcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmljb2thaGxlci9jb2xvcjJrL2lzc3Vlcy8zNTFcbiAgICByZXR1cm4gaC5sZW5ndGggPT09IDEgPyBgMCR7aH1gIDogaDtcbiAgfTtcbiAgcmV0dXJuIGAjJHtoZXgocil9JHtoZXgoZyl9JHtoZXgoYil9JHthIDwgMSA/IGhleChNYXRoLnJvdW5kKGEgKiAyNTUpKSA6ICcnfWA7XG59XG5cbi8qKlxuICogVGFrZXMgaW4gYW55IGNvbG9yIGFuZCByZXR1cm5zIGl0IGFzIGFuIHJnYmEgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b1JnYmEoY29sb3IpIHtcbiAgcmV0dXJuIHJnYmEoLi4ucGFyc2VUb1JnYmEoY29sb3IpKTtcbn1cblxuLyoqXG4gKiBUYWtlcyBpbiBhbnkgY29sb3IgYW5kIHJldHVybnMgaXQgYXMgYW4gaHNsYSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHRvSHNsYShjb2xvcikge1xuICByZXR1cm4gaHNsYSguLi5wYXJzZVRvSHNsYShjb2xvcikpO1xufVxuXG5leHBvcnQgeyBDb2xvckVycm9yJDEgYXMgQ29sb3JFcnJvciwgYWRqdXN0SHVlLCBkYXJrZW4sIGRlc2F0dXJhdGUsIGdldENvbnRyYXN0LCBnZXRMdW1pbmFuY2UsIGdldFNjYWxlLCBndWFyZCwgaGFzQmFkQ29udHJhc3QsIGhzbGEsIGxpZ2h0ZW4sIG1peCwgb3BhY2lmeSwgcGFyc2VUb0hzbGEsIHBhcnNlVG9SZ2JhLCByZWFkYWJsZUNvbG9yLCByZWFkYWJsZUNvbG9ySXNCbGFjaywgcmdiYSwgc2F0dXJhdGUsIHRvSGV4LCB0b0hzbGEsIHRvUmdiYSwgdHJhbnNwYXJlbnRpemUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmV4cG9ydHMuaW1wb3J0LmVzLm1qcy5tYXBcbiJdLCJuYW1lcyI6WyJndWFyZCIsImxvdyIsImhpZ2giLCJ2YWx1ZSIsIk1hdGgiLCJtaW4iLCJtYXgiLCJDb2xvckVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImNvbG9yIiwiQ29sb3JFcnJvciQxIiwicGFyc2VUb1JnYmEiLCJ0cmltIiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVkQ29sb3IiLCJuYW1lZENvbG9yUmVnZXgiLCJ0ZXN0IiwibmFtZVRvSGV4IiwicmVkdWNlZEhleE1hdGNoIiwicmVkdWNlZEhleFJlZ2V4IiwiZXhlYyIsImFyciIsIkFycmF5IiwiZnJvbSIsInNsaWNlIiwibWFwIiwieCIsInBhcnNlSW50IiwiciIsImhleE1hdGNoIiwiaGV4UmVnZXgiLCJyZ2JhTWF0Y2giLCJyZ2JhUmVnZXgiLCJwYXJzZUZsb2F0IiwiaHNsYU1hdGNoIiwiaHNsYVJlZ2V4IiwiaCIsInMiLCJsIiwiYSIsImhzbFRvUmdiIiwiTnVtYmVyIiwiaXNOYU4iLCJoYXNoIiwic3RyIiwiaSIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJjb2xvclRvSW50IiwicmVwbGFjZSIsImNvbXByZXNzZWRDb2xvck1hcCIsInNwbGl0IiwicmVkdWNlIiwiYWNjIiwibmV4dCIsImtleSIsInN1YnN0cmluZyIsImhleCIsInRvU3RyaW5nIiwicHJlZml4Iiwibm9ybWFsaXplZENvbG9yTmFtZSIsInJlc3VsdCIsImFtb3VudCIsImpvaW4iLCJSZWdFeHAiLCJyb3VuZENvbG9yIiwicm91bmQiLCJodWUiLCJzYXR1cmF0aW9uIiwibGlnaHRuZXNzIiwiaHVlUHJpbWUiLCJjaHJvbWEiLCJhYnMiLCJzZWNvbmRDb21wb25lbnQiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJsaWdodG5lc3NNb2RpZmljYXRpb24iLCJmaW5hbFJlZCIsImZpbmFsR3JlZW4iLCJmaW5hbEJsdWUiLCJwYXJzZVRvSHNsYSIsImFscGhhIiwiaW5kZXgiLCJkZWx0YSIsImhzbGEiLCJ0b0ZpeGVkIiwiYWRqdXN0SHVlIiwiZGVncmVlcyIsImRhcmtlbiIsImRlc2F0dXJhdGUiLCJnZXRMdW1pbmFuY2UiLCJmIiwiY2hhbm5lbCIsInBvdyIsImciLCJiIiwiZ2V0Q29udHJhc3QiLCJjb2xvcjEiLCJjb2xvcjIiLCJsdW1pbmFuY2UxIiwibHVtaW5hbmNlMiIsInJnYmEiLCJtaXgiLCJ3ZWlnaHQiLCJub3JtYWxpemUiLCJuIiwicjEiLCJnMSIsImIxIiwiYTEiLCJyMiIsImcyIiwiYjIiLCJhMiIsImFscGhhRGVsdGEiLCJub3JtYWxpemVkV2VpZ2h0IiwiY29tYmluZWRXZWlnaHQiLCJ3ZWlnaHQyIiwid2VpZ2h0MSIsImdldFNjYWxlIiwiY29sb3JzIiwibGFzdEluZGV4IiwibG93SW5kZXgiLCJmbG9vciIsImhpZ2hJbmRleCIsImNlaWwiLCJ1bml0IiwiZ3VpZGVsaW5lcyIsImRlY29yYXRpdmUiLCJyZWFkYWJsZSIsImFhIiwiYWFhIiwiaGFzQmFkQ29udHJhc3QiLCJzdGFuZGFyZCIsImJhY2tncm91bmQiLCJsaWdodGVuIiwidHJhbnNwYXJlbnRpemUiLCJvcGFjaWZ5IiwicmVhZGFibGVDb2xvcklzQmxhY2siLCJyZWFkYWJsZUNvbG9yIiwic2F0dXJhdGUiLCJ0b0hleCIsInRvUmdiYSIsInRvSHNsYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/color2k/dist/index.exports.import.es.mjs\n");

/***/ })

};
;